// <auto-generated />
using System;
using Flsurf.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Flsurf.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250528134236_PorposalUpdateForContract")]
    partial class PorposalUpdateForContract
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ChatEntityJobEntity", b =>
                {
                    b.Property<Guid>("ChatsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("JobsId")
                        .HasColumnType("uuid");

                    b.HasKey("ChatsId", "JobsId");

                    b.HasIndex("JobsId");

                    b.ToTable("ChatEntityJobEntity");
                });

            modelBuilder.Entity("Flsurf.Domain.Files.Entities.FileEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ContestEntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ContestEntryEntityId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("JobEntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MessageEntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<Guid?>("NewsEntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("OriginalDownloadUrl")
                        .HasColumnType("text");

                    b.Property<Guid?>("PortfolioProjectEntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProposalEntityId")
                        .HasColumnType("uuid");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("TicketCommentEntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TicketEntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WorkSessionEntityId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ContestEntityId");

                    b.HasIndex("ContestEntryEntityId");

                    b.HasIndex("JobEntityId");

                    b.HasIndex("MessageEntityId");

                    b.HasIndex("NewsEntityId");

                    b.HasIndex("PortfolioProjectEntityId");

                    b.HasIndex("ProposalEntityId");

                    b.HasIndex("TicketCommentEntityId");

                    b.HasIndex("TicketEntityId");

                    b.HasIndex("WorkSessionEntityId");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("Flsurf.Domain.Freelance.Entities.BonusEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContractId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastModifiedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.ToTable("Bonuses");
                });

            modelBuilder.Entity("Flsurf.Domain.Freelance.Entities.BookmarkedJobEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastModifiedById")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.HasIndex("UserId");

                    b.ToTable("BookmarkedJobs");
                });

            modelBuilder.Entity("Flsurf.Domain.Freelance.Entities.CategoryEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastModifiedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ParentCategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Flsurf.Domain.Freelance.Entities.ClientProfileEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ClientType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CompanyDescription")
                        .HasColumnType("text");

                    b.Property<Guid?>("CompanyLogoId")
                        .HasColumnType("uuid");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CompanyWebsite")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsPhoneVerified")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastActiveAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastModifiedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("Suspended")
                        .HasColumnType("boolean");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CompanyLogoId");

                    b.HasIndex("UserId");

                    b.ToTable("ClientProfiles");
                });

            modelBuilder.Entity("Flsurf.Domain.Freelance.Entities.ContestEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("EmployerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsEntriesPublic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsResultPublic")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastModifiedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("WinnerEntryId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EmployerId");

                    b.ToTable("Contests");
                });

            modelBuilder.Entity("Flsurf.Domain.Freelance.Entities.ContestEntryEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContestId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("FreelancerId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Hidden")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastModifiedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Reaction")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ContestId");

                    b.HasIndex("FreelancerId");

                    b.ToTable("ContestEntries");
                });

            modelBuilder.Entity("Flsurf.Domain.Freelance.Entities.ContractEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal?>("Bonus")
                        .HasColumnType("numeric");

                    b.Property<string>("BudgetType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ChatEntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ClientProfileEntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("ContractTerms")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DisputeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EmployerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FreelancerId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FreelancerTeamEntityId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsPaused")
                        .HasColumnType("boolean");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastModifiedById")
                        .HasColumnType("uuid");

                    b.Property<string>("PauseReason")
                        .HasColumnType("text");

                    b.Property<string>("PaymentSchedule")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ProposalId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ChatEntityId");

                    b.HasIndex("ClientProfileEntityId");

                    b.HasIndex("EmployerId");

                    b.HasIndex("FreelancerId");

                    b.HasIndex("FreelancerTeamEntityId");

                    b.HasIndex("JobId");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("Flsurf.Domain.Freelance.Entities.DisputeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContractId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<Guid>("InitiatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastModifiedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MessengerChatId")
                        .HasColumnType("uuid");

                    b.Property<string>("ModeratorComment")
                        .HasColumnType("text");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("StaffTicketId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("InitiatorId");

                    b.ToTable("Disputes");
                });

            modelBuilder.Entity("Flsurf.Domain.Freelance.Entities.DisputeStatusHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("DisputeEntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DisputeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DisputeEntityId");

                    b.ToTable("DisputeStatuses");
                });

            modelBuilder.Entity("Flsurf.Domain.Freelance.Entities.FreelancerProfileEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Availability")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("CostPerHour")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Experience")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastModifiedById")
                        .HasColumnType("uuid");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<string>("Resume")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("FreelancerProfiles");
                });

            modelBuilder.Entity("Flsurf.Domain.Freelance.Entities.FreelancerProfileViewEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FreelancerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastModifiedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ViewedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("FreelancerProfileViews");
                });

            modelBuilder.Entity("Flsurf.Domain.Freelance.Entities.FreelancerTeamEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AvatarId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Closed")
                        .HasColumnType("boolean");

                    b.Property<string>("ClosedReason")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastModifiedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AvatarId");

                    b.HasIndex("OwnerId");

                    b.ToTable("FreelancerTeams");
                });

            modelBuilder.Entity("Flsurf.Domain.Freelance.Entities.FreelancerTeamInvitation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FreelancerTeamId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastModifiedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FreelancerTeamId");

                    b.HasIndex("UserId");

                    b.ToTable("FreelancerTeamInvitations");
                });

            modelBuilder.Entity("Flsurf.Domain.Freelance.Entities.JobEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BudgetType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ClientProfileEntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ContractId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("Duration")
                        .HasColumnType("integer");

                    b.Property<Guid>("EmployerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastModifiedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("PaymentVerified")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("PublicationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ClientProfileEntityId");

                    b.HasIndex("ContractId");

                    b.HasIndex("EmployerId");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("Flsurf.Domain.Freelance.Entities.JobReviewEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FreelancerProfileEntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastModifiedById")
                        .HasColumnType("uuid");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ReviewerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TargetId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FreelancerProfileEntityId");

                    b.HasIndex("JobId");

                    b.HasIndex("ReviewerId");

                    b.HasIndex("TargetId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Flsurf.Domain.Freelance.Entities.PortfolioProjectEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("FreelancerProfileEntityId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Hidden")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastModifiedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ProposalEntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserRole")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FreelancerProfileEntityId");

                    b.HasIndex("ProposalEntityId");

                    b.HasIndex("UserId");

                    b.ToTable("PortfolioProjects");
                });

            modelBuilder.Entity("Flsurf.Domain.Freelance.Entities.ProposalEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BudgetType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CoverLetter")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<int>("EsitimatedDurationDays")
                        .HasColumnType("integer");

                    b.Property<Guid>("FreelancerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastModifiedById")
                        .HasColumnType("uuid");

                    b.Property<string>("SimilarExpriences")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FreelancerId");

                    b.HasIndex("JobId");

                    b.ToTable("Proposals");
                });

            modelBuilder.Entity("Flsurf.Domain.Freelance.Entities.SkillEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FreelancerProfileEntityId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastModifiedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("PortfolioProjectEntityId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FreelancerProfileEntityId");

                    b.HasIndex("PortfolioProjectEntityId");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("Flsurf.Domain.Freelance.Entities.TaskEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ContractId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastModifiedById")
                        .HasColumnType("uuid");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TaskDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TaskTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("Flsurf.Domain.Freelance.Entities.WorkSessionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ClientComment")
                        .HasColumnType("text");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<Guid>("ContractId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FreelancerId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastModifiedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("RejectedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("SubmittedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("FreelancerId");

                    b.ToTable("WorkSessions");
                });

            modelBuilder.Entity("Flsurf.Domain.Messanging.Entities.ChatEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("FinishedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTextingAllowed")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastModifiedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("Flsurf.Domain.Messanging.Entities.ChatInvitationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChatId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<Guid>("InvitedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastModifiedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("InvitedById");

                    b.HasIndex("UserId");

                    b.ToTable("Invitations");
                });

            modelBuilder.Entity("Flsurf.Domain.Messanging.Entities.MessageEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChatId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPinned")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastModifiedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ReplyedToMessageId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Flsurf.Domain.Messanging.Entities.MessageReadEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ChatEntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChatId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastModifiedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ReadAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ReadById")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ChatEntityId");

                    b.HasIndex("ReadById");

                    b.ToTable("MessageReads");
                });

            modelBuilder.Entity("Flsurf.Domain.Messanging.Entities.UserToChatEntity", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChatId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Bookmarked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("NotificationsDisabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.HasKey("UserId", "ChatId");

                    b.HasIndex("ChatId");

                    b.ToTable("UserToChats");
                });

            modelBuilder.Entity("Flsurf.Domain.Payment.Entities.PaymentMethodEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<int>("ExpMonth")
                        .HasColumnType("integer");

                    b.Property<int>("ExpYear")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("Last4")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastModifiedById")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProviderId")
                        .HasColumnType("uuid");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.HasIndex("UserId");

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("Flsurf.Domain.Payment.Entities.PaymentSystemEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastModifiedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("TransactionProviderEntityId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TransactionProviderEntityId");

                    b.ToTable("PaymentSystems");
                });

            modelBuilder.Entity("Flsurf.Domain.Payment.Entities.TransactionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AntoganistTransactionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Flow")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("FrozenUntil")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastModifiedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProviderId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("WalletEntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WalletId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.HasIndex("WalletEntityId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Flsurf.Domain.Payment.Entities.TransactionProviderEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<decimal>("FeePercent")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastModifiedById")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LogoId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LogoId");

                    b.ToTable("TransactionProviders");
                });

            modelBuilder.Entity("Flsurf.Domain.Payment.Entities.UserPaymentGatewayCustomer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("CustomerIdInProvider")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastModifiedById")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PaymentProviderId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PaymentProviderId");

                    b.HasIndex("UserId");

                    b.ToTable("UserPaymentGatewayCustomers");
                });

            modelBuilder.Entity("Flsurf.Domain.Payment.Entities.WalletEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BlockReason")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Blocked")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastModifiedById")
                        .HasColumnType("uuid");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("Flsurf.Domain.Staff.Entities.NewsEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("ChangeNotes")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastModifiedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("PublishTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("News");
                });

            modelBuilder.Entity("Flsurf.Domain.Staff.Entities.TicketCommentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastModifiedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ParentCommentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("TicketEntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TicketId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("TicketEntityId");

                    b.ToTable("TicketComments");
                });

            modelBuilder.Entity("Flsurf.Domain.Staff.Entities.TicketEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AnsweredCommentId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AssignedUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ClosedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastModifiedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AssignedUserId");

                    b.HasIndex("CreatedById");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("Flsurf.Domain.User.Entities.ConnectedAccountEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("Avatar")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastModifiedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ConnectedAccounts");
                });

            modelBuilder.Entity("Flsurf.Domain.User.Entities.GroupEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastModifiedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Flsurf.Domain.User.Entities.NotificationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Data")
                        .HasColumnType("jsonb");

                    b.Property<Guid?>("FromUserId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Hidden")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("IconId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastModifiedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ToUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IconId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Flsurf.Domain.User.Entities.SessionTicketEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte[]>("Value")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.HasKey("Id");

                    b.ToTable("SessionTickets");
                });

            modelBuilder.Entity("Flsurf.Domain.User.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AvatarId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Blocked")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ChatEntityId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("FreelancerTeamEntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("GroupEntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsExternalUser")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOnline")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuperadmin")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastModifiedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AvatarId");

                    b.HasIndex("ChatEntityId");

                    b.HasIndex("FreelancerTeamEntityId");

                    b.HasIndex("GroupEntityId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Flsurf.Domain.User.Entities.WarningEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<bool>("Expired")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ExpiresIn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastModifiedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UserEntityId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserEntityId");

                    b.ToTable("UserWarnings");
                });

            modelBuilder.Entity("JobEntitySkillEntity", b =>
                {
                    b.Property<Guid>("JobsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RequiredSkillsId")
                        .HasColumnType("uuid");

                    b.HasKey("JobsId", "RequiredSkillsId");

                    b.HasIndex("RequiredSkillsId");

                    b.ToTable("JobEntitySkillEntity");
                });

            modelBuilder.Entity("ChatEntityJobEntity", b =>
                {
                    b.HasOne("Flsurf.Domain.Messanging.Entities.ChatEntity", null)
                        .WithMany()
                        .HasForeignKey("ChatsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Flsurf.Domain.Freelance.Entities.JobEntity", null)
                        .WithMany()
                        .HasForeignKey("JobsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Flsurf.Domain.Files.Entities.FileEntity", b =>
                {
                    b.HasOne("Flsurf.Domain.Freelance.Entities.ContestEntity", null)
                        .WithMany("Files")
                        .HasForeignKey("ContestEntityId");

                    b.HasOne("Flsurf.Domain.Freelance.Entities.ContestEntryEntity", null)
                        .WithMany("Files")
                        .HasForeignKey("ContestEntryEntityId");

                    b.HasOne("Flsurf.Domain.Freelance.Entities.JobEntity", null)
                        .WithMany("Files")
                        .HasForeignKey("JobEntityId");

                    b.HasOne("Flsurf.Domain.Messanging.Entities.MessageEntity", null)
                        .WithMany("Files")
                        .HasForeignKey("MessageEntityId");

                    b.HasOne("Flsurf.Domain.Staff.Entities.NewsEntity", null)
                        .WithMany("Attachments")
                        .HasForeignKey("NewsEntityId");

                    b.HasOne("Flsurf.Domain.Freelance.Entities.PortfolioProjectEntity", null)
                        .WithMany("Images")
                        .HasForeignKey("PortfolioProjectEntityId");

                    b.HasOne("Flsurf.Domain.Freelance.Entities.ProposalEntity", null)
                        .WithMany("Files")
                        .HasForeignKey("ProposalEntityId");

                    b.HasOne("Flsurf.Domain.Staff.Entities.TicketCommentEntity", null)
                        .WithMany("Files")
                        .HasForeignKey("TicketCommentEntityId");

                    b.HasOne("Flsurf.Domain.Staff.Entities.TicketEntity", null)
                        .WithMany("Files")
                        .HasForeignKey("TicketEntityId");

                    b.HasOne("Flsurf.Domain.Freelance.Entities.WorkSessionEntity", null)
                        .WithMany("Files")
                        .HasForeignKey("WorkSessionEntityId");
                });

            modelBuilder.Entity("Flsurf.Domain.Freelance.Entities.BonusEntity", b =>
                {
                    b.HasOne("Flsurf.Domain.Freelance.Entities.ContractEntity", "Contract")
                        .WithMany("Bonuses")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Flsurf.Domain.Payment.ValueObjects.Money", "Amount", b1 =>
                        {
                            b1.Property<Guid>("BonusEntityId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric");

                            b1.Property<int>("Currency")
                                .HasColumnType("integer");

                            b1.HasKey("BonusEntityId");

                            b1.ToTable("Bonuses");

                            b1.WithOwner()
                                .HasForeignKey("BonusEntityId");
                        });

                    b.Navigation("Amount")
                        .IsRequired();

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("Flsurf.Domain.Freelance.Entities.BookmarkedJobEntity", b =>
                {
                    b.HasOne("Flsurf.Domain.Freelance.Entities.JobEntity", "Job")
                        .WithMany()
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Flsurf.Domain.User.Entities.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Flsurf.Domain.Freelance.Entities.CategoryEntity", b =>
                {
                    b.HasOne("Flsurf.Domain.Freelance.Entities.CategoryEntity", "ParentCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentCategoryId");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("Flsurf.Domain.Freelance.Entities.ClientProfileEntity", b =>
                {
                    b.HasOne("Flsurf.Domain.Files.Entities.FileEntity", "CompanyLogo")
                        .WithMany()
                        .HasForeignKey("CompanyLogoId");

                    b.HasOne("Flsurf.Domain.User.Entities.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyLogo");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Flsurf.Domain.Freelance.Entities.ContestEntity", b =>
                {
                    b.HasOne("Flsurf.Domain.User.Entities.UserEntity", "Employer")
                        .WithMany()
                        .HasForeignKey("EmployerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Flsurf.Domain.Payment.ValueObjects.Money", "PrizePool", b1 =>
                        {
                            b1.Property<Guid>("ContestEntityId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric");

                            b1.Property<int>("Currency")
                                .HasColumnType("integer");

                            b1.HasKey("ContestEntityId");

                            b1.ToTable("Contests");

                            b1.WithOwner()
                                .HasForeignKey("ContestEntityId");
                        });

                    b.Navigation("Employer");

                    b.Navigation("PrizePool")
                        .IsRequired();
                });

            modelBuilder.Entity("Flsurf.Domain.Freelance.Entities.ContestEntryEntity", b =>
                {
                    b.HasOne("Flsurf.Domain.Freelance.Entities.ContestEntity", "Contest")
                        .WithMany("ContestEntries")
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Flsurf.Domain.User.Entities.UserEntity", "Freelancer")
                        .WithMany()
                        .HasForeignKey("FreelancerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contest");

                    b.Navigation("Freelancer");
                });

            modelBuilder.Entity("Flsurf.Domain.Freelance.Entities.ContractEntity", b =>
                {
                    b.HasOne("Flsurf.Domain.Messanging.Entities.ChatEntity", null)
                        .WithMany("Contracts")
                        .HasForeignKey("ChatEntityId");

                    b.HasOne("Flsurf.Domain.Freelance.Entities.ClientProfileEntity", null)
                        .WithMany("Contracts")
                        .HasForeignKey("ClientProfileEntityId");

                    b.HasOne("Flsurf.Domain.User.Entities.UserEntity", "Employer")
                        .WithMany()
                        .HasForeignKey("EmployerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Flsurf.Domain.User.Entities.UserEntity", "Freelancer")
                        .WithMany()
                        .HasForeignKey("FreelancerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Flsurf.Domain.Freelance.Entities.FreelancerTeamEntity", null)
                        .WithMany("AssignedContracts")
                        .HasForeignKey("FreelancerTeamEntityId");

                    b.HasOne("Flsurf.Domain.Freelance.Entities.JobEntity", "Job")
                        .WithMany()
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Flsurf.Domain.Payment.ValueObjects.Money", "Budget", b1 =>
                        {
                            b1.Property<Guid>("ContractEntityId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric");

                            b1.Property<int>("Currency")
                                .HasColumnType("integer");

                            b1.HasKey("ContractEntityId");

                            b1.ToTable("Contracts");

                            b1.WithOwner()
                                .HasForeignKey("ContractEntityId");
                        });

                    b.OwnsOne("Flsurf.Domain.Payment.ValueObjects.Money", "CostPerHour", b1 =>
                        {
                            b1.Property<Guid>("ContractEntityId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric");

                            b1.Property<int>("Currency")
                                .HasColumnType("integer");

                            b1.HasKey("ContractEntityId");

                            b1.ToTable("Contracts");

                            b1.WithOwner()
                                .HasForeignKey("ContractEntityId");
                        });

                    b.Navigation("Budget")
                        .IsRequired();

                    b.Navigation("CostPerHour")
                        .IsRequired();

                    b.Navigation("Employer");

                    b.Navigation("Freelancer");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Flsurf.Domain.Freelance.Entities.DisputeEntity", b =>
                {
                    b.HasOne("Flsurf.Domain.Freelance.Entities.ContractEntity", "Contract")
                        .WithMany()
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Flsurf.Domain.User.Entities.UserEntity", "Initiator")
                        .WithMany()
                        .HasForeignKey("InitiatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contract");

                    b.Navigation("Initiator");
                });

            modelBuilder.Entity("Flsurf.Domain.Freelance.Entities.DisputeStatusHistory", b =>
                {
                    b.HasOne("Flsurf.Domain.Freelance.Entities.DisputeEntity", null)
                        .WithMany("StatusHistory")
                        .HasForeignKey("DisputeEntityId");
                });

            modelBuilder.Entity("Flsurf.Domain.Freelance.Entities.FreelancerProfileEntity", b =>
                {
                    b.HasOne("Flsurf.Domain.User.Entities.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Flsurf.Domain.Freelance.Entities.FreelancerTeamEntity", b =>
                {
                    b.HasOne("Flsurf.Domain.Files.Entities.FileEntity", "Avatar")
                        .WithMany()
                        .HasForeignKey("AvatarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Flsurf.Domain.User.Entities.UserEntity", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Avatar");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Flsurf.Domain.Freelance.Entities.FreelancerTeamInvitation", b =>
                {
                    b.HasOne("Flsurf.Domain.Freelance.Entities.FreelancerTeamEntity", "FreelancerTeam")
                        .WithMany("Invitations")
                        .HasForeignKey("FreelancerTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Flsurf.Domain.User.Entities.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FreelancerTeam");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Flsurf.Domain.Freelance.Entities.JobEntity", b =>
                {
                    b.HasOne("Flsurf.Domain.Freelance.Entities.CategoryEntity", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Flsurf.Domain.Freelance.Entities.ClientProfileEntity", null)
                        .WithMany("Jobs")
                        .HasForeignKey("ClientProfileEntityId");

                    b.HasOne("Flsurf.Domain.Freelance.Entities.ContractEntity", "Contract")
                        .WithMany()
                        .HasForeignKey("ContractId");

                    b.HasOne("Flsurf.Domain.User.Entities.UserEntity", "Employer")
                        .WithMany()
                        .HasForeignKey("EmployerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Flsurf.Domain.Payment.ValueObjects.Money", "Payout", b1 =>
                        {
                            b1.Property<Guid>("JobEntityId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric");

                            b1.Property<int>("Currency")
                                .HasColumnType("integer");

                            b1.HasKey("JobEntityId");

                            b1.ToTable("Jobs");

                            b1.WithOwner()
                                .HasForeignKey("JobEntityId");
                        });

                    b.Navigation("Category");

                    b.Navigation("Contract");

                    b.Navigation("Employer");

                    b.Navigation("Payout")
                        .IsRequired();
                });

            modelBuilder.Entity("Flsurf.Domain.Freelance.Entities.JobReviewEntity", b =>
                {
                    b.HasOne("Flsurf.Domain.Freelance.Entities.FreelancerProfileEntity", null)
                        .WithMany("Reviews")
                        .HasForeignKey("FreelancerProfileEntityId");

                    b.HasOne("Flsurf.Domain.Freelance.Entities.JobEntity", "Job")
                        .WithMany()
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Flsurf.Domain.User.Entities.UserEntity", "Reviewer")
                        .WithMany()
                        .HasForeignKey("ReviewerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Flsurf.Domain.User.Entities.UserEntity", "Target")
                        .WithMany()
                        .HasForeignKey("TargetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");

                    b.Navigation("Reviewer");

                    b.Navigation("Target");
                });

            modelBuilder.Entity("Flsurf.Domain.Freelance.Entities.PortfolioProjectEntity", b =>
                {
                    b.HasOne("Flsurf.Domain.Freelance.Entities.FreelancerProfileEntity", null)
                        .WithMany("PortfolioProjects")
                        .HasForeignKey("FreelancerProfileEntityId");

                    b.HasOne("Flsurf.Domain.Freelance.Entities.ProposalEntity", null)
                        .WithMany("PortfolioProjects")
                        .HasForeignKey("ProposalEntityId");

                    b.HasOne("Flsurf.Domain.User.Entities.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Flsurf.Domain.Freelance.Entities.ProposalEntity", b =>
                {
                    b.HasOne("Flsurf.Domain.User.Entities.UserEntity", "Freelancer")
                        .WithMany()
                        .HasForeignKey("FreelancerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Flsurf.Domain.Freelance.Entities.JobEntity", "Job")
                        .WithMany("Proposals")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Flsurf.Domain.Payment.ValueObjects.Money", "ProposedRate", b1 =>
                        {
                            b1.Property<Guid>("ProposalEntityId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric");

                            b1.Property<int>("Currency")
                                .HasColumnType("integer");

                            b1.HasKey("ProposalEntityId");

                            b1.ToTable("Proposals");

                            b1.WithOwner()
                                .HasForeignKey("ProposalEntityId");
                        });

                    b.Navigation("Freelancer");

                    b.Navigation("Job");

                    b.Navigation("ProposedRate")
                        .IsRequired();
                });

            modelBuilder.Entity("Flsurf.Domain.Freelance.Entities.SkillEntity", b =>
                {
                    b.HasOne("Flsurf.Domain.Freelance.Entities.FreelancerProfileEntity", null)
                        .WithMany("Skills")
                        .HasForeignKey("FreelancerProfileEntityId");

                    b.HasOne("Flsurf.Domain.Freelance.Entities.PortfolioProjectEntity", null)
                        .WithMany("Skills")
                        .HasForeignKey("PortfolioProjectEntityId");
                });

            modelBuilder.Entity("Flsurf.Domain.Freelance.Entities.TaskEntity", b =>
                {
                    b.HasOne("Flsurf.Domain.Freelance.Entities.ContractEntity", "Contract")
                        .WithMany("Tasks")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("Flsurf.Domain.Freelance.Entities.WorkSessionEntity", b =>
                {
                    b.HasOne("Flsurf.Domain.Freelance.Entities.ContractEntity", "Contract")
                        .WithMany("WorkSessions")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Flsurf.Domain.User.Entities.UserEntity", "Freelancer")
                        .WithMany()
                        .HasForeignKey("FreelancerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contract");

                    b.Navigation("Freelancer");
                });

            modelBuilder.Entity("Flsurf.Domain.Messanging.Entities.ChatEntity", b =>
                {
                    b.HasOne("Flsurf.Domain.User.Entities.UserEntity", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Flsurf.Domain.Messanging.Entities.ChatInvitationEntity", b =>
                {
                    b.HasOne("Flsurf.Domain.Messanging.Entities.ChatEntity", "Chat")
                        .WithMany()
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Flsurf.Domain.User.Entities.UserEntity", "InvitedBy")
                        .WithMany()
                        .HasForeignKey("InvitedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Flsurf.Domain.User.Entities.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("InvitedBy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Flsurf.Domain.Messanging.Entities.MessageEntity", b =>
                {
                    b.HasOne("Flsurf.Domain.Messanging.Entities.ChatEntity", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Flsurf.Domain.User.Entities.UserEntity", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Flsurf.Domain.Messanging.Entities.MessageReadEntity", b =>
                {
                    b.HasOne("Flsurf.Domain.Messanging.Entities.ChatEntity", null)
                        .WithMany("ReadRecords")
                        .HasForeignKey("ChatEntityId");

                    b.HasOne("Flsurf.Domain.User.Entities.UserEntity", "ReadBy")
                        .WithMany()
                        .HasForeignKey("ReadById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReadBy");
                });

            modelBuilder.Entity("Flsurf.Domain.Messanging.Entities.UserToChatEntity", b =>
                {
                    b.HasOne("Flsurf.Domain.Messanging.Entities.ChatEntity", "Chat")
                        .WithMany()
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Flsurf.Domain.User.Entities.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Flsurf.Domain.Payment.Entities.PaymentMethodEntity", b =>
                {
                    b.HasOne("Flsurf.Domain.Payment.Entities.TransactionProviderEntity", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Flsurf.Domain.User.Entities.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provider");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Flsurf.Domain.Payment.Entities.PaymentSystemEntity", b =>
                {
                    b.HasOne("Flsurf.Domain.Payment.Entities.TransactionProviderEntity", null)
                        .WithMany("Systems")
                        .HasForeignKey("TransactionProviderEntityId");
                });

            modelBuilder.Entity("Flsurf.Domain.Payment.Entities.TransactionEntity", b =>
                {
                    b.HasOne("Flsurf.Domain.Payment.Entities.TransactionProviderEntity", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId");

                    b.HasOne("Flsurf.Domain.Payment.Entities.WalletEntity", null)
                        .WithMany("Transactions")
                        .HasForeignKey("WalletEntityId");

                    b.OwnsOne("Flsurf.Domain.Payment.ValueObjects.Money", "AppliedFee", b1 =>
                        {
                            b1.Property<Guid>("TransactionEntityId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric");

                            b1.Property<int>("Currency")
                                .HasColumnType("integer");

                            b1.HasKey("TransactionEntityId");

                            b1.ToTable("Transactions");

                            b1.WithOwner()
                                .HasForeignKey("TransactionEntityId");
                        });

                    b.OwnsOne("Flsurf.Domain.Payment.ValueObjects.Money", "NetAmount", b1 =>
                        {
                            b1.Property<Guid>("TransactionEntityId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric");

                            b1.Property<int>("Currency")
                                .HasColumnType("integer");

                            b1.HasKey("TransactionEntityId");

                            b1.ToTable("Transactions");

                            b1.WithOwner()
                                .HasForeignKey("TransactionEntityId");
                        });

                    b.OwnsOne("Flsurf.Domain.Payment.ValueObjects.Money", "RawAmount", b1 =>
                        {
                            b1.Property<Guid>("TransactionEntityId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric");

                            b1.Property<int>("Currency")
                                .HasColumnType("integer");

                            b1.HasKey("TransactionEntityId");

                            b1.ToTable("Transactions");

                            b1.WithOwner()
                                .HasForeignKey("TransactionEntityId");
                        });

                    b.OwnsOne("Flsurf.Domain.Payment.Entities.TransactionPropsEntity", "Props", b1 =>
                        {
                            b1.Property<Guid>("TransactionEntityId")
                                .HasColumnType("uuid");

                            b1.Property<string>("PaymentGateway")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("PaymentUrl")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("ProviderPaymentId")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("SuccessUrl")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("TransactionEntityId");

                            b1.ToTable("Transactions");

                            b1.WithOwner()
                                .HasForeignKey("TransactionEntityId");

                            b1.OwnsOne("Flsurf.Domain.Payment.Policies.FeeContext", "FeeContext", b2 =>
                                {
                                    b2.Property<Guid>("TransactionPropsEntityTransactionEntityId")
                                        .HasColumnType("uuid");

                                    b2.Property<bool>("IsAdminOverride")
                                        .HasColumnType("boolean");

                                    b2.Property<bool>("IsContractCancellation")
                                        .HasColumnType("boolean");

                                    b2.HasKey("TransactionPropsEntityTransactionEntityId");

                                    b2.ToTable("Transactions");

                                    b2.WithOwner()
                                        .HasForeignKey("TransactionPropsEntityTransactionEntityId");
                                });

                            b1.Navigation("FeeContext")
                                .IsRequired();
                        });

                    b.Navigation("AppliedFee")
                        .IsRequired();

                    b.Navigation("NetAmount")
                        .IsRequired();

                    b.Navigation("Props");

                    b.Navigation("Provider");

                    b.Navigation("RawAmount")
                        .IsRequired();
                });

            modelBuilder.Entity("Flsurf.Domain.Payment.Entities.TransactionProviderEntity", b =>
                {
                    b.HasOne("Flsurf.Domain.Files.Entities.FileEntity", "Logo")
                        .WithMany()
                        .HasForeignKey("LogoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Logo");
                });

            modelBuilder.Entity("Flsurf.Domain.Payment.Entities.UserPaymentGatewayCustomer", b =>
                {
                    b.HasOne("Flsurf.Domain.Payment.Entities.TransactionProviderEntity", "PaymentProvider")
                        .WithMany()
                        .HasForeignKey("PaymentProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Flsurf.Domain.User.Entities.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaymentProvider");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Flsurf.Domain.Payment.Entities.WalletEntity", b =>
                {
                    b.HasOne("Flsurf.Domain.User.Entities.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Flsurf.Domain.Payment.ValueObjects.Money", "AvailableBalance", b1 =>
                        {
                            b1.Property<Guid>("WalletEntityId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric");

                            b1.Property<int>("Currency")
                                .HasColumnType("integer");

                            b1.HasKey("WalletEntityId");

                            b1.ToTable("Wallets");

                            b1.WithOwner()
                                .HasForeignKey("WalletEntityId");
                        });

                    b.OwnsOne("Flsurf.Domain.Payment.ValueObjects.Money", "Frozen", b1 =>
                        {
                            b1.Property<Guid>("WalletEntityId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric");

                            b1.Property<int>("Currency")
                                .HasColumnType("integer");

                            b1.HasKey("WalletEntityId");

                            b1.ToTable("Wallets");

                            b1.WithOwner()
                                .HasForeignKey("WalletEntityId");
                        });

                    b.OwnsOne("Flsurf.Domain.Payment.ValueObjects.Money", "PendingIncome", b1 =>
                        {
                            b1.Property<Guid>("WalletEntityId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric");

                            b1.Property<int>("Currency")
                                .HasColumnType("integer");

                            b1.HasKey("WalletEntityId");

                            b1.ToTable("Wallets");

                            b1.WithOwner()
                                .HasForeignKey("WalletEntityId");
                        });

                    b.Navigation("AvailableBalance")
                        .IsRequired();

                    b.Navigation("Frozen")
                        .IsRequired();

                    b.Navigation("PendingIncome")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Flsurf.Domain.Staff.Entities.NewsEntity", b =>
                {
                    b.HasOne("Flsurf.Domain.User.Entities.UserEntity", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Flsurf.Domain.Staff.Entities.TicketCommentEntity", b =>
                {
                    b.HasOne("Flsurf.Domain.User.Entities.UserEntity", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Flsurf.Domain.Staff.Entities.TicketEntity", null)
                        .WithMany("Comments")
                        .HasForeignKey("TicketEntityId");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("Flsurf.Domain.Staff.Entities.TicketEntity", b =>
                {
                    b.HasOne("Flsurf.Domain.User.Entities.UserEntity", "AssignedUser")
                        .WithMany()
                        .HasForeignKey("AssignedUserId");

                    b.HasOne("Flsurf.Domain.User.Entities.UserEntity", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.Navigation("AssignedUser");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("Flsurf.Domain.User.Entities.NotificationEntity", b =>
                {
                    b.HasOne("Flsurf.Domain.Files.Entities.FileEntity", "Icon")
                        .WithMany()
                        .HasForeignKey("IconId");

                    b.Navigation("Icon");
                });

            modelBuilder.Entity("Flsurf.Domain.User.Entities.UserEntity", b =>
                {
                    b.HasOne("Flsurf.Domain.Files.Entities.FileEntity", "Avatar")
                        .WithMany()
                        .HasForeignKey("AvatarId");

                    b.HasOne("Flsurf.Domain.Messanging.Entities.ChatEntity", null)
                        .WithMany("Participants")
                        .HasForeignKey("ChatEntityId");

                    b.HasOne("Flsurf.Domain.Freelance.Entities.FreelancerTeamEntity", null)
                        .WithMany("Participants")
                        .HasForeignKey("FreelancerTeamEntityId");

                    b.HasOne("Flsurf.Domain.User.Entities.GroupEntity", null)
                        .WithMany("Users")
                        .HasForeignKey("GroupEntityId");

                    b.OwnsOne("Flsurf.Domain.User.ValueObjects.NotificationSettings", "NotificationSettings", b1 =>
                        {
                            b1.Property<Guid>("UserEntityId")
                                .HasColumnType("uuid");

                            b1.Property<bool>("DailySummaryEmailEnabled")
                                .HasColumnType("boolean");

                            b1.Property<bool>("DesktopBadgeCountEnabled")
                                .HasColumnType("boolean");

                            b1.Property<bool>("DesktopNotificationsEnabled")
                                .HasColumnType("boolean");

                            b1.Property<TimeSpan?>("DoNotDisturbEnd")
                                .HasColumnType("interval");

                            b1.Property<TimeSpan?>("DoNotDisturbStart")
                                .HasColumnType("interval");

                            b1.Property<bool>("EmailNotificationsEnabled")
                                .HasColumnType("boolean");

                            b1.Property<bool>("EmailWhenOfflineEnabled")
                                .HasColumnType("boolean");

                            b1.Property<string>("PreferredLanguage")
                                .HasColumnType("text");

                            b1.Property<bool>("PushNotificationsEnabled")
                                .HasColumnType("boolean");

                            b1.Property<bool>("PushWhenOfflineEnabled")
                                .HasColumnType("boolean");

                            b1.Property<bool>("WebBadgeCountEnabled")
                                .HasColumnType("boolean");

                            b1.Property<bool>("WebNotificationsEnabled")
                                .HasColumnType("boolean");

                            b1.HasKey("UserEntityId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserEntityId");
                        });

                    b.OwnsOne("Flsurf.Domain.User.ValueObjects.TaxInformation", "TaxInfo", b1 =>
                        {
                            b1.Property<Guid>("UserEntityId")
                                .HasColumnType("uuid");

                            b1.Property<string>("CountryIso")
                                .IsRequired()
                                .HasMaxLength(2)
                                .HasColumnType("character varying(2)");

                            b1.Property<int>("LegalStatus")
                                .HasColumnType("integer");

                            b1.Property<string>("LocalIdNumber")
                                .IsRequired()
                                .HasMaxLength(12)
                                .HasColumnType("character varying(12)");

                            b1.Property<int>("TaxRegime")
                                .HasColumnType("integer");

                            b1.Property<string>("VatNumber")
                                .HasColumnType("text");

                            b1.Property<bool>("VatRegistered")
                                .HasColumnType("boolean");

                            b1.HasKey("UserEntityId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserEntityId");

                            b1.OwnsOne("Flsurf.Domain.User.ValueObjects.BankDetails", "BankDetails", b2 =>
                                {
                                    b2.Property<Guid>("TaxInformationUserEntityId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("AccountNumber")
                                        .IsRequired()
                                        .HasMaxLength(34)
                                        .HasColumnType("character varying(34)");

                                    b2.Property<string>("BankName")
                                        .IsRequired()
                                        .HasMaxLength(200)
                                        .HasColumnType("character varying(200)");

                                    b2.Property<string>("Bic")
                                        .IsRequired()
                                        .HasMaxLength(20)
                                        .HasColumnType("character varying(20)");

                                    b2.HasKey("TaxInformationUserEntityId");

                                    b2.ToTable("Users");

                                    b2.WithOwner()
                                        .HasForeignKey("TaxInformationUserEntityId");
                                });

                            b1.Navigation("BankDetails")
                                .IsRequired();
                        });

                    b.Navigation("Avatar");

                    b.Navigation("NotificationSettings")
                        .IsRequired();

                    b.Navigation("TaxInfo");
                });

            modelBuilder.Entity("Flsurf.Domain.User.Entities.WarningEntity", b =>
                {
                    b.HasOne("Flsurf.Domain.User.Entities.UserEntity", null)
                        .WithMany("Warnings")
                        .HasForeignKey("UserEntityId");
                });

            modelBuilder.Entity("JobEntitySkillEntity", b =>
                {
                    b.HasOne("Flsurf.Domain.Freelance.Entities.JobEntity", null)
                        .WithMany()
                        .HasForeignKey("JobsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Flsurf.Domain.Freelance.Entities.SkillEntity", null)
                        .WithMany()
                        .HasForeignKey("RequiredSkillsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Flsurf.Domain.Freelance.Entities.CategoryEntity", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("Flsurf.Domain.Freelance.Entities.ClientProfileEntity", b =>
                {
                    b.Navigation("Contracts");

                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("Flsurf.Domain.Freelance.Entities.ContestEntity", b =>
                {
                    b.Navigation("ContestEntries");

                    b.Navigation("Files");
                });

            modelBuilder.Entity("Flsurf.Domain.Freelance.Entities.ContestEntryEntity", b =>
                {
                    b.Navigation("Files");
                });

            modelBuilder.Entity("Flsurf.Domain.Freelance.Entities.ContractEntity", b =>
                {
                    b.Navigation("Bonuses");

                    b.Navigation("Tasks");

                    b.Navigation("WorkSessions");
                });

            modelBuilder.Entity("Flsurf.Domain.Freelance.Entities.DisputeEntity", b =>
                {
                    b.Navigation("StatusHistory");
                });

            modelBuilder.Entity("Flsurf.Domain.Freelance.Entities.FreelancerProfileEntity", b =>
                {
                    b.Navigation("PortfolioProjects");

                    b.Navigation("Reviews");

                    b.Navigation("Skills");
                });

            modelBuilder.Entity("Flsurf.Domain.Freelance.Entities.FreelancerTeamEntity", b =>
                {
                    b.Navigation("AssignedContracts");

                    b.Navigation("Invitations");

                    b.Navigation("Participants");
                });

            modelBuilder.Entity("Flsurf.Domain.Freelance.Entities.JobEntity", b =>
                {
                    b.Navigation("Files");

                    b.Navigation("Proposals");
                });

            modelBuilder.Entity("Flsurf.Domain.Freelance.Entities.PortfolioProjectEntity", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Skills");
                });

            modelBuilder.Entity("Flsurf.Domain.Freelance.Entities.ProposalEntity", b =>
                {
                    b.Navigation("Files");

                    b.Navigation("PortfolioProjects");
                });

            modelBuilder.Entity("Flsurf.Domain.Freelance.Entities.WorkSessionEntity", b =>
                {
                    b.Navigation("Files");
                });

            modelBuilder.Entity("Flsurf.Domain.Messanging.Entities.ChatEntity", b =>
                {
                    b.Navigation("Contracts");

                    b.Navigation("Messages");

                    b.Navigation("Participants");

                    b.Navigation("ReadRecords");
                });

            modelBuilder.Entity("Flsurf.Domain.Messanging.Entities.MessageEntity", b =>
                {
                    b.Navigation("Files");
                });

            modelBuilder.Entity("Flsurf.Domain.Payment.Entities.TransactionProviderEntity", b =>
                {
                    b.Navigation("Systems");
                });

            modelBuilder.Entity("Flsurf.Domain.Payment.Entities.WalletEntity", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Flsurf.Domain.Staff.Entities.NewsEntity", b =>
                {
                    b.Navigation("Attachments");
                });

            modelBuilder.Entity("Flsurf.Domain.Staff.Entities.TicketCommentEntity", b =>
                {
                    b.Navigation("Files");
                });

            modelBuilder.Entity("Flsurf.Domain.Staff.Entities.TicketEntity", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Files");
                });

            modelBuilder.Entity("Flsurf.Domain.User.Entities.GroupEntity", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Flsurf.Domain.User.Entities.UserEntity", b =>
                {
                    b.Navigation("Warnings");
                });
#pragma warning restore 612, 618
        }
    }
}
